<Cartesian Product(카테시안 곱) => CROSS JOIN (과목2-71번)>
- 카테시안 곱: From절에 2개 이상의 Table이 있고, 두 Table 사이의 유효한 Join 조건이 기술되어 있지 않은 경우에는 
두 Table의 모든 행들이 무조건 결합하여 Table들에 존재하는 행 갯수를 곱한 만큼의 결과값이 반환되는 것

- CROSS JOIN: CROSS JOIN은 E.F.CODD 박사가 언급한 일반 집합 연산자의 PRODUCT의 개념으로 
테이블 간 JOIN 조건이 없는 경우 생길 수 있는 모든 데이터의 조합을 말한다. 
두 개의 테이블에 대한 CARTESIAN PRODUCT 또는 CROSS PRODUCT와 같은 표현으로,
결과는 양쪽 집합의 M*N 건의 데이터 조합이 발생한다. 


<FULL OUTER JOIN (과목2-73번)>
: 조인 수행시 좌측, 우측 테이블의 모든 데이터를 읽어 JOIN하여 결과를 생성한다. 
즉, TABLE A와 B가 있을 때(TABLE 'A', 'B' 모두 기준이 됨), 
RIGHT OUTER JOIN과 LEFT OUTER JOIN의 결과를 합집합으로 처리한 결과와 동일하다. 
단, UNION ALL이 아닌 UNION 기능과 같으므로 중복되는 데이터는 삭제한다. 
그리고 FULL JOIN으로 OUTER 키워드를 생략해서 사용할 수 있다. 

<데이터모델링 (과목1-5번)> 
- 개념적 데이터 모델링: 추상화 수준이 높고 업무중심적이고 포괄적인 수준의 모델링 진행.
전사적 데이터 모델링, EA수립시 많이 이용

- 논리적 데이터 모델링: 시스템으로 구축하고자 하는 업무에 대해 Key, 속성, 관계 등을
정확하게 표현, 재사용성이 높음

- 물리적 데이터 모델링: 실제로 데이터 베이스에 이식할 수 있도록 성능, 저장 등 
물리적인 성격을 고려하여 설계  


<데이터베이스 스키마 구조 (과목1-6번)>
- 외부스키마
: View 단계 여러 개의 사용자 관점으로 구성, 즉 개개 사용자 단계로서
개개 사용자가 보는 개인적 DB 스키마, 
DB의 개개 사용자나 응용프로그래머가 접근하는 DB 정의
=> 사용자 관점

- 개념스키마
: 개념단계 하나의 개념적 스키마로 구성 모든 사용자 관점을 통합한
조직 전체의 DB를 기술하는 것,
모든 응용시스템들이나 사용자들이 필요로 하는 데이터를 통합한 조직 전체의
DB를 기술한 것으로 DB에 저장되는 데이터와 그들간의 관계를 표현하는 스키마
=> 통합관점, 조직 전체 관점

- 내부스키마
: 내부단계, 내부 스키마로 구성, DB가 물리적으로 저장된 형식,
물리적 장치에서 데이터가 실제적으로 저장되는 방법을 표현하는 스키마
=> 물리적 저장구조


<CASCADE (과목2-9번)>
: CASCADE CONSTRAINT 옵션은 해당 테이블과 관계가 있었던 
참조되는 제약조건에 대해서도 삭제한다는 것을 의미한다. 
SQL Server에서는 CASCADE 옵션이 존재하지 않으며 
테이블을 삭제하기 전에 참조하는 FOREIGN KEY 제약 조건 
또는 참조하는 테이블을 먼저 삭제해야 한다. 


<제약조건의 종류 (과목2-10번)>
- PK(Primary key, 기본키, 주키) =>  UNIQUE & NOT NULL 
: 테이블당 1개만 가능

- UNIQUE => 중복X, NULL 입력 가능

- NOT NULL

- CHECK

- FK(Foreign key, 외래키): 테이블당 여러 개 생성 가능
